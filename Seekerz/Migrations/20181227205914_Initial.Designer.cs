// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Seekerz.Data;

namespace Seekerz.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181227205914_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Seekerz.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "d83b833c-27bf-4118-aed9-0d993bd9b7b3", AccessFailedCount = 0, ConcurrencyStamp = "b878abee-f449-4ae9-bb5c-e85533abccf0", Email = "admin@admin.com", EmailConfirmed = true, FirstName = "Admina", LastName = "Straytor", LockoutEnabled = false, NormalizedEmail = "ADMIN@ADMIN.COM", NormalizedUserName = "ADMIN@ADMIN.COM", PasswordHash = "AQAAAAEAACcQAAAAEOJ9w2MbqCz0hQUDGzJZWUaiZqUdaLaTOhb+rq9raGsYb/jAAxk9yF1bpio9HEmnSg==", PhoneNumberConfirmed = false, SecurityStamp = "8d01b696-f106-4730-873e-3ae04824cf9b", TwoFactorEnabled = false, UserName = "Admina" },
                        new { Id = "df7399e2-00ed-4abc-bf6c-583a79cb953a", AccessFailedCount = 0, ConcurrencyStamp = "54f32b8f-7f13-4aad-a012-91acb5a11d30", Email = "hchalmers23@gmail.com", EmailConfirmed = true, FirstName = "Helen", LastName = "Chalmers", LockoutEnabled = false, NormalizedEmail = "HCHALMERS23@GMAIL.COM", NormalizedUserName = "HCHALMERS23@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAEDHe732ARKtMpEdkz5taNpGJCcg4FAY2H2xtD5HDaQQIJjqZQPJSSg5l2e9TkGqbag==", PhoneNumberConfirmed = false, SecurityStamp = "7c731bf8-52d3-4b24-bb62-a11881a659c3", TwoFactorEnabled = false, UserName = "Helen" }
                    );
                });

            modelBuilder.Entity("Seekerz.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Location")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("URL");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("Company");

                    b.HasData(
                        new { CompanyId = 1, Location = "West End, Nashville", Name = "Maize Analytics", URL = "https://www.maizeanalytics.com/", UserId = "df7399e2-00ed-4abc-bf6c-583a79cb953a" },
                        new { CompanyId = 2, Location = "Nashville, TN", Name = "Claris Health", URL = "https://www.clarishealth.com/", UserId = "df7399e2-00ed-4abc-bf6c-583a79cb953a" },
                        new { CompanyId = 3, Location = "Nashville, TN", Name = "Info Works", URL = "https://www.infoworks.io/", UserId = "d83b833c-27bf-4118-aed9-0d993bd9b7b3" },
                        new { CompanyId = 4, Location = "Franklin, TN", Name = "Ramsey Solutions", URL = "", UserId = "d83b833c-27bf-4118-aed9-0d993bd9b7b3" },
                        new { CompanyId = 5, Location = "BelleMeade, Nashville, TN", Name = "The Atkinsons", URL = "", UserId = "d83b833c-27bf-4118-aed9-0d993bd9b7b3" }
                    );
                });

            modelBuilder.Entity("Seekerz.Models.Job", b =>
                {
                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("PersonalNotes");

                    b.Property<string>("Position")
                        .IsRequired();

                    b.Property<string>("ToldNss");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("JobId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("Job");

                    b.HasData(
                        new { JobId = 1, CompanyId = 2, IsActive = true, PersonalNotes = "Liked the Company and is growing dramatically over the next year.", Position = "Software Developer 1", ToldNss = "Nss KNows - employer came in to NSS to interview", UserId = "df7399e2-00ed-4abc-bf6c-583a79cb953a" },
                        new { JobId = 2, CompanyId = 3, IsActive = true, PersonalNotes = "Had a mock interview that could turn into a real one.", Position = "Software Developer", ToldNss = "Kristin knows about the mock interview might turn into a real one", UserId = "df7399e2-00ed-4abc-bf6c-583a79cb953a" },
                        new { JobId = 3, CompanyId = 1, IsActive = true, PersonalNotes = "Interviewed with Chase Ramsey - have a 2nd interview scheduled", Position = "Technical Operations", ToldNss = "knows that I have a technical interview scheduled", UserId = "df7399e2-00ed-4abc-bf6c-583a79cb953a" },
                        new { JobId = 4, CompanyId = 1, IsActive = false, PersonalNotes = "Over It", Position = "Executive Assistant", ToldNss = "They don't", UserId = "df7399e2-00ed-4abc-bf6c-583a79cb953a" },
                        new { JobId = 5, CompanyId = 1, IsActive = true, PersonalNotes = "Side Gig", Position = "DogWalker", ToldNss = "They don't", UserId = "d83b833c-27bf-4118-aed9-0d993bd9b7b3" }
                    );
                });

            modelBuilder.Entity("Seekerz.Models.QA", b =>
                {
                    b.Property<int>("QAId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer");

                    b.Property<string>("Notes");

                    b.Property<string>("Question")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("QAId");

                    b.HasIndex("UserId");

                    b.ToTable("QA");

                    b.HasData(
                        new { QAId = 1, Answer = "OhmyZsh on Mac side and GitBash on WindowsSide", Notes = "Maize Analytics asked this", Question = "Tell me about what you use in the CommandLine", UserId = "df7399e2-00ed-4abc-bf6c-583a79cb953a" },
                        new { QAId = 2, Answer = "Confidence Level", Notes = "Kyle from Infoworks - during Mock Interview", Question = "What has been your greatest weakness", UserId = "df7399e2-00ed-4abc-bf6c-583a79cb953a" },
                        new { QAId = 3, Answer = "Hard Personalities to work with ", Notes = "Claris Health", Question = "What was your biggest challenge at NSS", UserId = "df7399e2-00ed-4abc-bf6c-583a79cb953a" }
                    );
                });

            modelBuilder.Entity("Seekerz.Models.TaskToDo", b =>
                {
                    b.Property<int>("TaskToDoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CompleteDate");

                    b.Property<bool>("IsCompleted");

                    b.Property<int>("JobId");

                    b.Property<string>("NewTask")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("TaskToDoId");

                    b.HasIndex("JobId");

                    b.HasIndex("UserId");

                    b.ToTable("TaskToDo");

                    b.HasData(
                        new { TaskToDoId = 1, CompleteDate = new DateTime(2018, 12, 18, 13, 30, 0, 0, DateTimeKind.Unspecified), IsCompleted = false, JobId = 3, NewTask = "Study-Technical Interview", UserId = "df7399e2-00ed-4abc-bf6c-583a79cb953a" },
                        new { TaskToDoId = 2, CompleteDate = new DateTime(2018, 12, 17, 12, 30, 0, 0, DateTimeKind.Unspecified), IsCompleted = false, JobId = 1, NewTask = "Follow up with Claris Health", UserId = "df7399e2-00ed-4abc-bf6c-583a79cb953a" },
                        new { TaskToDoId = 3, CompleteDate = new DateTime(2018, 12, 17, 12, 30, 0, 0, DateTimeKind.Unspecified), IsCompleted = false, JobId = 3, NewTask = "Follow up with Infoworks", UserId = "df7399e2-00ed-4abc-bf6c-583a79cb953a" },
                        new { TaskToDoId = 4, CompleteDate = new DateTime(2018, 12, 17, 12, 30, 0, 0, DateTimeKind.Unspecified), IsCompleted = false, JobId = 5, NewTask = "Take Pup for walk", UserId = "d83b833c-27bf-4118-aed9-0d993bd9b7b3" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Seekerz.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Seekerz.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Seekerz.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Seekerz.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Seekerz.Models.Company", b =>
                {
                    b.HasOne("Seekerz.Models.ApplicationUser", "User")
                        .WithMany("Companies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Seekerz.Models.Job", b =>
                {
                    b.HasOne("Seekerz.Models.Company", "Company")
                        .WithMany("Jobs")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Seekerz.Models.ApplicationUser", "User")
                        .WithMany("Jobs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Seekerz.Models.QA", b =>
                {
                    b.HasOne("Seekerz.Models.ApplicationUser", "User")
                        .WithMany("QAs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Seekerz.Models.TaskToDo", b =>
                {
                    b.HasOne("Seekerz.Models.Job", "Jobs")
                        .WithMany("UserTasks")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Seekerz.Models.ApplicationUser", "User")
                        .WithMany("TasksToDo")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
